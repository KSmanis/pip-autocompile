[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover",
]
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
relative_files = true

[tool.mypy]
disallow_any_unimported = true
show_error_codes = true
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "dockerfile"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "pygit2"

[tool.poetry]
authors = ["Konstantinos Smanis <konstantinos.smanis@gmail.com>"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Build Tools",
]
description = "Automate pip-compile for multiple environments."
include = [
  {format = "sdist", path = "examples"},
  {format = "sdist", path = "tests"},
]
license = "MIT"
name = "pip-autocompile"
packages = [
  {from = "src", include = "pipautocompile"},
]
readme = "README.md"
repository = "https://github.com/KSmanis/pip-autocompile"
version = "0.7.14"

[tool.poetry.dependencies]
click = "^8.1.7"
dockerfile = "^3.3.1"
pygit2 = "^1.13.2"
python = "^3.8"
python-on-whales = "^0.65.0"

[tool.poetry.group.lint.dependencies]
mypy = "^1.6.1"
pre-commit = "^3.5.0"

[tool.poetry.group.release.dependencies]
python-semantic-release = "^8.3.0"

[tool.poetry.group.test.dependencies]
pip-tools = "^7.3.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.1"

[tool.poetry.scripts]
pip-autocompile = "pipautocompile.main:cli"

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=term --cov-report=xml --strict-markers"
filterwarnings = [
  "ignore:Support for class-based `config` is deprecated, use ConfigDict instead:DeprecationWarning:pydantic",
  "ignore:Valid config keys have changed in V2:UserWarning:pydantic",
]
testpaths = ["tests"]

[tool.ruff]
select = [
  "B",  # flake8-bugbear
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "PGH",  # pygrep-hooks
  "PT",  # flake8-pytest-style
  "RUF",  # ruff
  "S",  # flake8-bandit
  "TCH",  # flake8-type-checking
  "UP",  # pyupgrade
  "W",  # pycodestyle
]
src = ["src"]
target-version = "py38"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-values-type = "tuple"

[tool.ruff.flake8-type-checking]
exempt-modules = []
strict = true

[tool.ruff.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"tests/**" = ["S101"]

[tool.semantic_release]
build_command = "poetry build"
commit_author = "Konstantinos Smanis <konstantinos.smanis@gmail.com>"
commit_message = "build: release v{version}"
major_on_zero = false
version_toml = ["pyproject.toml:tool.poetry.version"]

[tool.semantic_release.changelog]
exclude_commit_patterns = ["\\d+\\.\\d+\\.\\d+"]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.tomlsort]
all = true
spaces_before_inline_comment = 2
trailing_comma_inline_array = true
